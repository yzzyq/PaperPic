import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import os
from astropy.io import fits

#对单个光谱数据的处理
def readfits(path,fileName):
    dfu = fits.open(path + '/'+fileName)
    #初始波长
    beginWave = dfu[0].header['COEFF0']
    #步长
    step = dfu[0].header['CD1_1']
    #读出数据中的位置
    #位置
    ra = dfu[0].header['ra']
    dec = dfu[0].header['DEC']
    # snrr_stn = dfu[0].header['snrr']
    # snri_stn = dfu[0].header['snri']
    poistion = [float(ra),float(dec)]
    #光谱中的流量 
    flux = dfu[0].data[0]
    #求出波长,求出与流量对应的波长
    wave = np.array([10**(beginWave + step*j) for j in range(len(flux))])
    data = [wave,flux]
    #-------------------------------------------
    # return data,poistion
    return data, poistion

#数据文件中的光谱数据
def exractData(fileName):
    listFile = os.listdir(fileName)
    dataSet = []
    allPoistion = []
    for file in listFile:
        dfu = fits.open(fileName + '/'+file)
        # data_class = dfu[0].header['class']
        # print('数据的类别是：',data_class)
        # red = 0
        # if data_class == 'GALAXY':
            # red = searchRedshift(file,redshift,fileName)
        #print(file)
        #读出数据并且保存
        data,poistion = readfits(fileName,file)
        dataSet.append(data)
        allPoistion.append(poistion)
    #os.chdir(os.pardir)
    return dataSet,allPoistion


def getData(path_name):
    # 3611
    # true_index = [279, 69, 1400, 63, 84, 8, 7, 1501, 2063, 943, 1149, 326, 2811, 175, 1713, 1719, 48, 766, 906, 1164, 1550, 1729, 1893, 2502, 2553, 1096, 2933, 3261]
    
    # 8202
    # true_index = [44, 477, 7198, 413, 319, 507, 5912, 356, 7742, 279, 6869, 2775, 3498, 3722, 4197, 4198, 4546, 4651, 4678, 4852, 6498, 6656, 6767, 6852, 6858, 6862, 7152, 7170, 7173, 7350, 7413, 752, 6696, 7534, 7618, 7627, 7951, 8008, 8172, 7185, 6315, 5908, 6002, 7077, 7178, 1085, 5979, 6077, 6530, 803, 6745, 7743, 7797, 6555, 7806, 7140, 7479, 5867, 6078, 6631, 7750, 6890, 8007, 7953, 5905, 7186, 7114, 6156, 7708, 7963, 8184, 6143, 7658, 6192, 7052, 1642, 1959, 2076, 2525, 2947, 3347, 3629, 3719, 3997, 5520, 5732, 5929, 4029, 2289, 3574]

    # 12872
    # true_index = [1908, 2202, 2460, 5192, 6979, 10771, 10843, 11428, 159, 7282, 3128, 11529, 2544, 5632, 5811, 11554, 5782, 1044, 1751, 10842, 2276, 5716, 60, 5780, 2324, 11950, 5955, 11100, 100, 151, 1428, 2566, 3424, 5534, 7155, 3245, 344, 10925, 1980, 5771, 1770, 5051, 5757, 266, 1819, 1903, 2550, 5752, 1691, 1491, 10793, 6638, 11500, 1033, 1883, 12230, 1108, 4402, 5620, 9044, 117, 5698, 645, 988, 1098, 1296, 1444, 1518, 2200, 2874, 3686, 4677, 5686, 5812, 5842, 10666, 11059, 11124, 11402, 11567, 11636, 11185, 5797, 2421, 11357, 333, 312, 305, 1766, 1415, 325, 851, 1101, 5931, 1224, 1348, 1642, 3823, 3187, 4912, 5538, 5773, 8766, 11037, 11069, 11255, 11501, 473, 1534, 9092, 3551, 3849, 4085, 4390, 4656, 5132, 5466, 5751, 5919, 5925, 5952, 6404, 6502, 6541, 6902, 7595, 7785, 8085, 8294, 8365, 8702, 8771, 9439, 9810, 11955, 12080, 12133, 12616, 12676, 4668, 4922, 7555, 9823, 8081, 7469, 8338, 4711, 5065, 6419]

    # 19411
    true_index = [2744, 9953, 9955, 10660, 11345, 13563, 14768, 16316, 14778, 13774, 15064, 2291, 3819, 4309, 7370, 7389, 7397, 15660, 331, 14022, 10745, 14775, 5631, 13863, 6807, 15181, 10061, 10509, 11095, 11543, 14012, 14507, 14876, 14920, 14950, 15813, 16093, 16185, 18181, 14807, 631, 13740, 15153, 15800, 14078, 16496, 2702, 14534, 10257, 10904, 1785, 14979, 13915, 14250, 16045, 7089, 7467, 14458, 14335, 13504, 14672, 478, 2246, 2471, 3980, 5103, 5357, 7064, 8619, 9965, 10080, 10246, 10924, 11099, 11364, 11589, 13420, 13458, 14080, 14090, 14660, 317, 5136, 7014, 7324, 9944, 10467, 10470, 10639, 13532, 5683, 11556, 10915, 11067, 14046, 11579, 13811, 9943, 10917, 10234, 11481, 10245, 10942, 908, 3461, 4789, 13768, 13570, 13741, 13929, 14184, 10954, 15362, 10835, 13559, 1075, 1123, 1449, 2344, 5763, 5912, 6341, 6593, 6962, 7071, 9177, 9194, 9464, 10392, 11726, 12252, 13016, 17866, 18619, 19080, 19099, 5505, 7849, 8183, 11985, 10775]

    dataSet,allPoistion = exractData(path_name)
    draw_data = []
    for index in range(len(allPoistion)):
        if index in true_index:
            allPoistion[index].append('y')
            draw_data.append(allPoistion[index])
        else:
            allPoistion[index].append('n')
    return allPoistion, draw_data

    


    # 8202
    # true_index = [44, 477, 7198, 413, 319, 507, 5912, 356, 7742, 279, 6869, 2775, 3498, 3722, 4197, 4198, 4546, 4651, 4678, 4852, 6498, 6656, 6767, 6852, 6858, 6862, 7152, 7170, 7173, 7350, 7413, 752, 6696, 7534, 7618, 7627, 7951, 8008, 8172, 7185, 6315, 5908, 6002, 7077, 7178, 1085, 5979, 6077, 6530, 803, 6745, 7743, 7797, 6555, 7806, 7140, 7479, 5867, 6078, 6631, 7750, 6890, 8007, 7953, 5905, 7186, 7114, 6156, 7708, 7963, 8184, 6143, 7658, 6192, 7052, 1642, 1959, 2076, 2525, 2947, 3347, 3629, 3719, 3997, 5520, 5732, 5929, 4029, 2289, 3574]

    # # 12872
    # true_index = [1908, 2202, 2460, 5192, 6979, 10771, 10843, 11428, 159, 7282, 3128, 11529, 2544, 5632, 5811, 11554, 5782, 1044, 1751, 10842, 2276, 5716, 60, 5780, 2324, 11950, 5955, 11100, 100, 151, 1428, 2566, 3424, 5534, 7155, 3245, 344, 10925, 1980, 5771, 1770, 5051, 5757, 266, 1819, 1903, 2550, 5752, 1691, 1491, 10793, 6638, 11500, 1033, 1883, 12230, 1108, 4402, 5620, 9044, 117, 5698, 645, 988, 1098, 1296, 1444, 1518, 2200, 2874, 3686, 4677, 5686, 5812, 5842, 10666, 11059, 11124, 11402, 11567, 11636, 11185, 5797, 2421, 11357, 333, 312, 305, 1766, 1415, 325, 851, 1101, 5931, 1224, 1348, 1642, 3823, 3187, 4912, 5538, 5773, 8766, 11037, 11069, 11255, 11501, 473, 1534, 9092, 3551, 3849, 4085, 4390, 4656, 5132, 5466, 5751, 5919, 5925, 5952, 6404, 6502, 6541, 6902, 7595, 7785, 8085, 8294, 8365, 8702, 8771, 9439, 9810, 11955, 12080, 12133, 12616, 12676, 4668, 4922, 7555, 9823, 8081, 7469, 8338, 4711, 5065, 6419]

    # # 19411
    # true_index = [2744, 9953, 9955, 10660, 11345, 13563, 14768, 16316, 14778, 13774, 15064, 2291, 3819, 4309, 7370, 7389, 7397, 15660, 331, 14022, 10745, 14775, 5631, 13863, 6807, 15181, 10061, 10509, 11095, 11543, 14012, 14507, 14876, 14920, 14950, 15813, 16093, 16185, 18181, 14807, 631, 13740, 15153, 15800, 14078, 16496, 2702, 14534, 10257, 10904, 1785, 14979, 13915, 14250, 16045, 7089, 7467, 14458, 14335, 13504, 14672, 478, 2246, 2471, 3980, 5103, 5357, 7064, 8619, 9965, 10080, 10246, 10924, 11099, 11364, 11589, 13420, 13458, 14080, 14090, 14660, 317, 5136, 7014, 7324, 9944, 10467, 10470, 10639, 13532, 5683, 11556, 10915, 11067, 14046, 11579, 13811, 9943, 10917, 10234, 11481, 10245, 10942, 908, 3461, 4789, 13768, 13570, 13741, 13929, 14184, 10954, 15362, 10835, 13559, 1075, 1123, 1449, 2344, 5763, 5912, 6341, 6593, 6962, 7071, 9177, 9194, 9464, 10392, 11726, 12252, 13016, 17866, 18619, 19080, 19099, 5505, 7849, 8183, 11985, 10775]
    
    # return data


if __name__ == '__main__':
    # 这是数据的类别分布图
    path_name = 'E:/数据/comparedExperiment/testData/2-3000-4000'
    # data = getData(path_name)
    all_data, data = getData(path_name)
    data_pd = pd.DataFrame(data, columns=['right ascension', 'declination', 'class_1'])
    print(data_pd)
    plt.figure(figsize=(7,5))
    sns.scatterplot(data_pd['right ascension'], data_pd['declination'], hue=data_pd['class_1'])
 
    plt.show()

